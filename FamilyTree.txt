;;;; Family Tree program

(defstruct person
	name
	spouse
	parents
	sibling
	halfsibling
	ancestor
	cousin
)
( setf FamilyTree (make-hash-table :test 'equal))

;;; Creates person "Bill" and "Jim" and puts them in hashtable FamilyTree (Jim is the parent of Bill)
;;; (setf personTemp (make-person :name "Bill" :parents "Jim"))
;;; (setf (gethash "Bill" FamilyTree) personTemp)
;;; (setf personTemp (make-person :name "Jim"))
;;; (setf (gethash "Jim" FamilyTree) personTemp)

;;; Access Bill or Jim
;;; (gethash "Bill" FamilyTree)
;;; (gethash "Jim" FamilyTree)

;;; Hard coding file path for now
;;; Note: Change this path to the absolute path of the test file you wish to run
(setf inputFile (open "~/lispFamilyTree/testFiles/canWeAddStuff.txt"))

;;; Handle the E query
(defun E(p1 p2 &optional c)
	;;; See if the first parent exists and add them if they do not
	(if (not (gethash p1 FamilyTree))
		(setf (gethash p1 FamilyTree) (make-person :name p1)))
	;;; See if the second parent exists and add them if they do not
	(if (not (gethash p2 FamilyTree))
		(setf (gethash p2 FamilyTree) (make-person :name p2)))
	;;; Assign the parameters to point to the actual person instead of a string representing their name
	(setf p1 (gethash p1 FamilyTree))
	(setf p2 (gethash p2 FamilyTree))
	;;; Add the child if they exist
	(if (not(and (gethash c FamilyTree) (c)))
		(setf (gethash c FamilyTree) (make-person :name c :parents list(p1 p2)))))

;;; Handle the various queries
;;; Cannot figure out how to call line from file as a function
;;; This should happen below
(defun processFile()
	(loop for line = (read inputFile nil)
		while line
		do (funcall (first line) (second line) (third line) (fourth line))))

;;; Run the process
(processFile)

;;; Count of how many are in hashtable to see if they were really added
(print "The count of people in the hash table is ")
(print (hash-table-count FamilyTree))
