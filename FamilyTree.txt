;;;; Family Tree program

(defstruct person
	name
	spouse
	parents
	children
)
( setf FamilyTree (make-hash-table :test 'equal))

;;; Creates person "Bill" and "Jim" and puts them in hashtable FamilyTree (Jim is the parent of Bill)
;;; (setf personTemp (make-person :name "Bill" :parents "Jim"))
;;; (setf (gethash "Bill" FamilyTree) personTemp)
;;; (setf personTemp (make-person :name "Jim"))
;;; (setf (gethash "Jim" FamilyTree) personTemp)

;;; Access Bill or Jim
;;; (gethash "Bill" FamilyTree)
;;; (gethash "Jim" FamilyTree)

;;; Hard coding file path for now
;;; Note: Change this path to the absolute path of the test file you wish to run
(setf inputFile (open "~/lispFamilyTree/testFiles/canWeAddStuff.txt"))

;;; Get the parents of the person
(defun getParents(p)
	let (setq person (gethash p FamilyTree))
		person-parents)

;;; Get the siblings of the person
;(defun getSiblings(p)
;	(setf siblings (list ()))
;	(let (setq person (gethash p FamilyTree)
;		if (not(null (first (person-parents)))
;			append(siblings (first (person-parents))-children)
;		if (not(null (second (person-parents)))
;			append(siblings (second (person-parents))-children)
;		siblings))

;;; Handle the E query
(defun E(p1 p2 &optional c)
	;;; See if the first parent exists and add them if they do not
	(if (not (gethash p1 FamilyTree))
		(setf firstperson (make-person :name p1))
		(setf firstperson (gethash p1 FamilyTree)))
	;;; See if the second parent exists and add them if they do not
	(if (not (gethash p2 FamilyTree))
		(setf secondperson (make-person :name p2))
		(setf secondperson (gethash p2 FamilyTree)))
	;;; Add the child if they exist
	(if (not(gethash c FamilyTree))
		(setf child (make-person :name c :parents (list firstperson secondperson)))
		(progn(setf child (gethash c FamilyTree))
			(setf (person-parents child) (list firstperson secondperson))))
	;;; Add the child to the parents lists of children
	(if (not(null child))
		(progn(append (person-children firstperson) child)
			(append (person-children secondperson) child)))
	;;; Add all the people to the hashtable
	(if (not (gethash p1 FamilyTree))
		(setf (gethash p1 FamilyTree) firstperson))
	(if (not (gethash p2 FamilyTree))
		(setf (gethash p2 FamilyTree) secondperson))
	(if (not (gethash c FamilyTree))
		(setf (gethash c FamilyTree) child)))

;;; Handle the W query
(defun W(p r)
			

;;; Handle the various queries
;;; Cannot figure out how to call line from file as a function
;;; This should happen below
(defun processFile()
	(loop for line = (read inputFile nil)
		while line
		do (funcall (first line) (second line) (third line) (fourth line))))

;;; Run the process
(processFile)

;;; Count of how many are in hashtable to see if they were really added
(print "The count of people in the hash table is ")
(print (hash-table-count FamilyTree))
